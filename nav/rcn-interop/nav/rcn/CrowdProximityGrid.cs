/*
 * Copyright (c) 2011 Stephen A. Pratt
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
using System;
using org.critterai.nav.rcn.externs;

namespace org.critterai.nav.rcn
{
    /// <summary>
    /// Represents proximity data generated by a 
    /// <see cref="CrowdManager"/> object during its update method.
    /// </summary>
    /// <remarks>
    /// <p>Objects of this type can only be obtained from a 
    /// <see cref="CrowdManger"/> object.</p>
    /// <p>This data is provided for debug purposes.</p>
    /// <p><b>Example of iterating the proximity data:</b></p>
    /// <p><pre>
    /// int[] bounds = new int[4];
    /// grid.GetBounds(bounds);
	///	float cs = grid.GetCellSize();
	///	for (int y = bounds[1]; y &lt;= bounds[3]; ++y)
	///	{
    ///	    // y-bounds of the cell in world units.
    ///	    float minY = y * cs;
    ///	    float maxY = y * cs + cs;
    ///		for (int x = bounds[0]; x &lt;= bounds[2]; ++x)
	///		{
	///			int count = grid->getItemCountAt(x, y); 
    ///			// x-bounds of the cell in world units.
    ///			float minX = x * cs;
    ///			float maxX = x * cs + cs;
	///		}
	///	}
    /// </pre></p>
    /// <p>Behavior is undefined if an object is used after 
    /// disposal.</p>
    /// </remarks>
    public sealed class CrowdProximityGrid
        : ManagedObject
    {
        private IntPtr root;

        /// <summary>
        /// Unsafe constructor.
        /// </summary>
        /// <param name="grid">A pointer to a dtProximityGrid object.</param>
        internal CrowdProximityGrid(IntPtr grid)
            : base(AllocType.ExternallyManaged)
        {
            root = grid;
        }

        ~CrowdProximityGrid()
        {
            RequestDisposal();
        }

        /// <summary>
        /// Marks the object as disposed.
        /// </summary>
        public override void RequestDisposal()
        {
            root = IntPtr.Zero;
        }

        /// <summary>
        /// TRUE if the object has been disposed.
        /// </summary>
        public override bool IsDisposed
        {
            get { return (root == IntPtr.Zero); }
        }

        /// <summary>
        /// The item count at the specified grid location.
        /// </summary>
        /// <param name="x">The x-value of the grid location.
        /// (bounds[0] &lt;= value &lt;= bounds[2])</param>
        /// <param name="y">The y-value of the grid location.
        /// (bounds[1] &lt;= value &lt;= bounds[3])</param>
        /// <returns>The item count at the specified grid location.</returns>
        public int GetItemCountAt(int x, int y)
        {
            return CrowdProximityGridEx.GetItemCountAt(root, x, y);
        }

        /// <summary>
        /// The cell size of the grid.
        /// </summary>
        /// <remarks>
        /// <p>Used for converting from grid units to world units.</p>
        /// </remarks>
        /// <returns>The cell size of the grid.</returns>
        public float GetCellSize()
        {
            return CrowdProximityGridEx.GetCellSize(root);
        }

        /// <summary>
        /// Gets the bounds of the grid. (minX, minY, maxX, maxY)
        /// </summary>
        /// <remarks>
        /// To convert from grid units to world units, multipy by the grid's
        /// cell size.
        /// </remarks>
        /// <param name="bounds">The array to load the results into. (Size: 4)
        /// </param>
        public void GetBounds(int[] bounds)
        {
            CrowdProximityGridEx.GetBounds(root, bounds);
        }


    }
}
