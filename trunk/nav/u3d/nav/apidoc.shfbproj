<Project DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003" ToolsVersion="3.5">
  <PropertyGroup>
    <!-- The configuration and platform will be used to determine which
         assemblies to include from solution and project documentation
         sources -->
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{fd853ace-f024-458f-8fff-0f61988d836d}</ProjectGuid>
    <SHFBSchemaVersion>1.9.0.0</SHFBSchemaVersion>
    <!-- AssemblyName, Name, and RootNamespace are not used by SHFB but Visual
         Studio adds them anyway -->
    <AssemblyName>Documentation</AssemblyName>
    <RootNamespace>Documentation</RootNamespace>
    <Name>Documentation</Name>
    <!-- SHFB properties -->
    <OutputPath>.\apidoc\</OutputPath>
    <HtmlHelpName>cai-nav-u3d-help</HtmlHelpName>
    <Language>en-US</Language>
    <BuildLogFile>bin\apidoc.log</BuildLogFile>
    <FrameworkVersion>2.0.50727</FrameworkVersion>
    <HelpFileFormat>Website</HelpFileFormat>
    <CopyrightText>Copyright %28c%29 2010 Stephen A. Pratt</CopyrightText>
    <HelpTitle>CritterAI Navigation Library %28C#/Unity3D%29</HelpTitle>
    <IndentHtml>False</IndentHtml>
    <FooterText>&amp;lt%3ba href=&amp;quot%3bhttp://www.critterai.org/&amp;quot%3b target=&amp;quot%3b_parent&amp;quot%3b&amp;gt%3bProject Home&amp;lt%3b/a&amp;gt%3b | &amp;lt%3ba href=&amp;quot%3bhttp://code.google.com/p/critterai/&amp;quot%3b target=&amp;quot%3b_parent&amp;quot%3b&amp;gt%3bSource Code&amp;lt%3b/a&amp;gt%3b | &amp;lt%3ba href=&amp;quot%3bhttp://www.critterai.org/cailic&amp;quot%3b target=&amp;quot%3b_parent&amp;quot%3b&amp;gt%3bLicense&amp;lt%3b/a&amp;gt%3b</FooterText>
    <DocumentationSources>
      <DocumentationSource sourceFile="bin\Release\cai-nav-u3d.dll" />
      <DocumentationSource sourceFile="bin\Release\cai-nav-u3d.xml" />
    </DocumentationSources>
    <NamespaceSummaries>
      <NamespaceSummaryItem name="org.critterai.nav" isDocumented="True">&lt;p&gt;The CritterAI Navigation Library provides multi-threaded pathfinding functionality.&lt;/p&gt; 
&lt;p&gt;&lt;a href="http://www.critterai.org/" target="_parent"&gt;Project Home&lt;br /&gt; 
&lt;/a&gt;&lt;a href="http://code.google.com/p/critterai/" target="_parent"&gt;Project Source&lt;/a&gt;&lt;br /&gt; 
&lt;a href="http://www.critterai.org/cailic" target="_parent"&gt;License&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Primary Features&lt;/h2&gt; 
&lt;ul&gt; 
    &lt;li&gt;The navigator can be run on its own thread.&lt;/li&gt; 
    &lt;li&gt;The navigator can be throttled so that it will only process searches for a specified number of nanoseconds per frame.&lt;/li&gt; 
    &lt;li&gt;Paths can be cached so they can be re-used by multiple clients and repaired if needed.&lt;/li&gt; 
    &lt;li&gt;Paths are constructed as corridors, rather than waypoints. As long as the path's client remains within the corridor, the path object can provide it with a target toward the goal.&lt;/li&gt; 
    &lt;li&gt;If a client move's outside of the path corridor, it can ask for the path to be repaired. Path repair is usually cheaper than requesting a full new path search.&lt;/li&gt; 
    &lt;li&gt;Path string-pulling is performed on demand and will auto-adjust based on the client's current position.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Primary Use Case&lt;/h2&gt; 
&lt;h3&gt;Navigator Thread&lt;/h3&gt; 
&lt;ol&gt; 
    &lt;li&gt;Construct a &lt;A HREF="org/critterai/nav/ThreadedNavigator.html" title="class in org.critterai.nav"&gt;threaded navigator&lt;/A&gt; using the &lt;A HREF="org/critterai/nav/NavUtil.html" title="class in org.critterai.nav"&gt;&lt;CODE&gt;NavUtil&lt;/CODE&gt;&lt;/A&gt; class.&lt;/li&gt; 
    &lt;li&gt;Start the threaded navigator on its own thread.&lt;/li&gt; 
    &lt;li&gt;Provide &lt;A HREF="org/critterai/nav/MasterNavigator.Navigator.html" title="class in org.critterai.nav"&gt;&lt;CODE&gt;Navigator&lt;/CODE&gt;&lt;/A&gt; references to clients via the &lt;A HREF="org/critterai/nav/ThreadedNavigator.html#navigator()"&gt;&lt;CODE&gt;ThreadedNavigator.navigator()&lt;/CODE&gt;&lt;/A&gt; operation.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h3&gt;Client Objects&lt;/h3&gt; 
&lt;h4&gt;General Requests&lt;/h4&gt; 
&lt;ol&gt; 
    &lt;li&gt;Provide a  &lt;A HREF="org/critterai/nav/MasterNavigator.Navigator.html" title="class in org.critterai.nav"&gt;&lt;CODE&gt;Navigator&lt;/CODE&gt;&lt;/A&gt; reference to the client  via the &lt;A HREF="org/critterai/nav/ThreadedNavigator.html#navigator()"&gt;&lt;CODE&gt;ThreadedNavigator.navigator()&lt;/CODE&gt;&lt;/A&gt; operation.&lt;/li&gt; 
    &lt;li&gt;Client makes a request of the Navigator and receives a &lt;A HREF="org/critterai/nav/MasterNavRequest.NavRequest.html" title="class in org.critterai.nav"&gt;request&lt;/A&gt; object.&lt;/li&gt; 
    &lt;li&gt;Client monitors its request object for completion via the &lt;A HREF="org/critterai/nav/MasterNavRequest.NavRequest.html#isFinished()"&gt;&lt;CODE&gt;isFinished()&lt;/CODE&gt;&lt;/A&gt; operation.&lt;/li&gt; 
    &lt;li&gt;When the request is finished, check its state.&lt;/li&gt; 
    &lt;li&gt;If the requst failed,  figure out what to do next.&lt;/li&gt; 
    &lt;li&gt;If the request completed successfully, retrieve its data.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;The client should  monitor its Navigator object to see if it is disposed. If the Navigator is disposed, it will no longer accept requests and all data it provided to the client is no longer valid.&lt;/p&gt; 
&lt;h4&gt;Using Paths&lt;/h4&gt; 
&lt;p&gt;When a path request completes successully, the &lt;A HREF="org/critterai/nav/MasterNavRequest.NavRequest.html" title="class in org.critterai.nav"&gt;request&lt;/A&gt; object provides a &lt;A HREF="org/critterai/nav/MasterPath.Path.html" title="class in org.critterai.nav"&gt;&lt;CODE&gt;Path&lt;/CODE&gt;&lt;/A&gt; object. The Path object is used as follows:&lt;/p&gt; 
&lt;ol&gt; 
    &lt;li&gt;Client requests a target via the &lt;A HREF="org/critterai/nav/MasterPath.Path.html#getTarget(float, float, float, org.critterai.math.Vector3)"&gt;&lt;CODE&gt;getTarget()&lt;/CODE&gt;&lt;/A&gt; operation. The operation takes the client's current position and provides a target position within the path corridor that has LOS from the client's position.&lt;/li&gt; 
    &lt;li&gt;Client uses it locomotion method to move toward the target.&lt;/li&gt; 
    &lt;li&gt;Every frame, or as needed, the client asks for a new target position. This repeats until the path goal is reached.&lt;/li&gt; 
    &lt;li&gt;If the getTarget() operation returns FALSE, then the client position is no longer valid for the path. (The client may have wandered outside of the path corridor.) Try to repair the path via a &lt;A HREF="org/critterai/nav/MasterNavigator.Navigator.html#repairPath(float, float, float, org.critterai.nav.MasterPath.Path)"&gt;repair path&lt;/A&gt; request.&lt;/li&gt; 
    &lt;li&gt;Client uses the repaired path to continue pathfinding.&lt;/li&gt; 
&lt;/ol&gt;</NamespaceSummaryItem>
    </NamespaceSummaries>
    <ProjectSummary>
    </ProjectSummary>
    <CppCommentsFixup>False</CppCommentsFixup>
    <HeaderText>
    </HeaderText>
    <SyntaxFilters>Standard</SyntaxFilters>
  </PropertyGroup>
  <!-- There are no properties for these groups.  AnyCPU needs to appear in
       order for Visual Studio to perform the build.  The others are optional
       common platform types that may appear. -->
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' ">
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' ">
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|x86' ">
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|x86' ">
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|x64' ">
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|x64' ">
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|Win32' ">
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|Win32' ">
  </PropertyGroup>
  <!-- Import the SHFB build targets -->
  <Import Project="$(SHFBROOT)\SandcastleHelpFileBuilder.targets" />
</Project>