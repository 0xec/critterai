<?xml version="1.0" encoding="utf-8"?>
<topic id="0b06b934-9f2b-43a3-a96b-6fd9dc8483c7" revisionNumber="1">
  <developerConceptualDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">

    <introduction>

      <para>The purpose of NMGen is to generate polygon and detail meshes representing the traversable 
      surface of arbitrary source geometry. The mesh data is then used to create navigation mesh tiles.</para>
      
      <para>Core namespace: <codeEntityReference>N:org.critterai.nmgen</codeEntityReference></para>
      
      <para>Unity extensions namespace: 
      <codeEntityReference>N:org.critterai.nmgen.u3d</codeEntityReference>
      </para>
     
    </introduction>
    
    <section address="polyMesh">
    
      <title>The Polygon Mesh</title>
      
      <content>
      
        <para>Implemented by <token>PolyMesh</token></para>
        
        <para>The polygon mesh is made up of convex polygons with between three and six vertices. 
        Each polygon also includes edge link data, and user-defined polygon flags and area ids.
        Flags and area ids provide per agent accessibility and traversal cost information.</para>
        
        <para>For a polygon mesh created using the standard build process:</para>
        
		<list class="bullet">
		
		  <listItem>The mesh will contain polygons with a variety of vertex counts from three 
		  to the maximum allowed.
		  (<codeEntityReference>F:org.critterai.nmgen.NMGen.MaxAllowedVertsPerPoly</codeEntityReference>)</listItem>
		  
		  <listItem>Polygons may overlap, with a minimum floor to ceiling height controlled by the value of 
		  <codeEntityReference>P:org.critterai.nmgen.NMGenParams.WalkableHeight</codeEntityReference>.</listItem>
		  
		  <listItem>All polygons will have at least one flag set. 
		  (<codeEntityReference>F:org.critterai.nmgen.NMGen.DefaultFlag</codeEntityReference>)</listItem>
		  
		  <listItem>All polygons will have a non-zero area id. 
		  (<codeEntityReference>F:org.critterai.nmgen.NMGen.WalkableArea</codeEntityReference>)</listItem>
		</list>

        <mediaLink><image xlink:href="PolyMesh-Basic"/></mediaLink>
        
      </content>
      
    </section>
    
    <section address="detailMesh">
    
      <title>The Detail Mesh</title>
      
      <content>
      
        <para>Implemented by <token>DetailMesh</token></para>
        
        <para>Pathfinding cares mostly about polygon connectivity, accessibility, and traversal cost. 
        It doesn't need a lot of height accuracy.  But some navigation use cases do require more 
        accurate height data than provided by the polygon mesh. The detail mesh provides the extra 
        height detail for these cases.</para>
        
        <para>The detail mesh structure consists of sub-meshes, one for each polygon in the polygon mesh. A sub-mesh is a 
        triangle mesh that contains all the vertices of its associated polygon, plus additional edge and internal vertices 
        for the extra height detail.</para>

		<alert class="note">
		<para>This isn't the best example of a detail mesh. Take a look at the stairway. There is some extra detail there.</para>
		</alert>

        <mediaLink><image xlink:href="PolyMeshDetail-Basic"/></mediaLink>
        
      </content>
      
    </section>

    <section address="buildingMeshes">
    
      <title>Building Meshes</title>
      
      <content>
      
        <para>There are multiple ways to build the meshes.</para>
        
        <para>See <link xlink:href="fa09a9f3-7d31-4441-8f03-80adfddf8d48"/> for building meshes in 
        the Unity Editor.</para>
        
        <para>To get started building meshes via code:</para>
       
		<list class="bullet">
		
		  <listItem>The 
		  <codeEntityReference>M:org.critterai.nmgen.NMGen.BuildPolyMesh(org.critterai.nmgen.NMGenParams,org.critterai.nmgen.BuildFlags,org.critterai.geom.TriangleMesh,org.critterai.nmgen.PolyMesh@,org.critterai.nmgen.PolyMeshDetail@,System.String[]@,System.Boolean)</codeEntityReference>
		  utility method will create meshes in a single step.</listItem>
		  
		  <listItem>The <codeEntityReference>T:org.critterai.nmgen.IncrementalBuilder</codeEntityReference>
		  class can be used to provide feedback during the build.</listItem>
		  
		</list>

        <para>If you want to implement your own custom build process, start with the  
        <codeEntityReference>T:org.critterai.nmgen.IncrementalBuilder</codeEntityReference> code. 
        You'll also want to become familiar with <link xlink:href="e72bd1ee-04b0-4bbb-a21d-d8d7ecaa11af"/>.
        </para>
        
      </content>
      
    </section>
    
    <section address="triangles">
    
      <title>But...Where are my triangles?!</title>
      
      <content>
      
        <para>For users of the original NMGen who are asking: "But I used NMGen to build triangle meshes. 
        That's all I want, triangle meshes. Where are they now?!"</para>
        
        <para>Actually, they are where they've always been; in the detail mesh. The original NMGen built
        its navigation mesh data in the same way NMGen does now. It just converted the detail mesh into
        a triangle mesh at the very end. So you just need to perform that final step yourself. 
        And there is a utility method that will help you do it.</para>
        
		<code>
		// Where detailMesh is a PolyMeshDetail object.
        // E.g. PolyMeshDetail detailMesh = myBakedPolyMesh.GetDetailMesh();

        float[] verts;
        int[] tris;

        if (NMGen.ExtractTriMesh(detailMesh, out verts, out tris))
        {
           // Do something with the triangles.
        }
		</code>

        <para>That's all there is to it.</para>
        
      </content>
      
    </section>

  </developerConceptualDocument>
</topic>